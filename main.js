/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PinnedEmojiPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  pinnedTabSize: 33,
  labelEmojiMap: [
    { label: "Home", emoji: "\u{1F3E0}" },
    { label: "Tasks", emoji: "\u{1F4CB}" },
    { label: "Books", emoji: "\u{1F4D6}" }
  ]
};
var DEFAULT_PIN_EMOJI = "\u{1F4CC}";
var COMMON_EMOJIS = {
  "\u2764\uFE0F Heart": "\u2764\uFE0F",
  "\u{1F916} Robot": "\u{1F916}",
  "\u{1F525} Fire": "\u{1F525}",
  "\u{1F4DA} Books": "\u{1F4DA}",
  "\u{1F389} Party": "\u{1F389}",
  "\u270F\uFE0F  Pencil": "\u270F\uFE0F",
  "\u{1F31F} Star": "\u{1F31F}",
  "\u{1F4A1} Idea": "\u{1F4A1}",
  "\u2705 Check": "\u2705",
  "\u{1F4CC} Pin": "\u{1F4CC}",
  "\u26A1 Lightning": "\u26A1"
};
var PinnedEmojiPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Pinned Emoji Plugin loading...");
    await this.loadSettings();
    this.styleEl = document.createElement("style");
    document.head.appendChild(this.styleEl);
    this.generateDynamicCSS();
    this.addSettingTab(new PinnedEmojiSettingTab(this.app, this));
  }
  onunload() {
    var _a;
    console.log("Pinned Emoji Plugin unloading...");
    (_a = this.styleEl) == null ? void 0 : _a.remove();
  }
  /**
   * Load user settings from disk or use defaults.
   */
  async loadSettings() {
    const data = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
  }
  /**
   * Save user settings and regenerate dynamic CSS.
   */
  async saveSettings() {
    await this.saveData(this.settings);
    this.generateDynamicCSS();
  }
  /**
   * Build CSS that customizes pinned tabs:
   * - Sets pinned tab width.
   * - Replaces pinned tab labels with user-chosen emojis.
   * - Adds default "ðŸ“Œ" emoji for unmapped pinned tabs.
   */
  generateDynamicCSS() {
    let css = `
      .workspace-tab-header:has(.mod-pinned) {
        max-width: ${this.settings.pinnedTabSize}px !important;
      }

      .workspace-tab-header:has(.mod-pinned) .workspace-tab-header-inner-title {
        text-overflow: clip !important;
        visibility: hidden !important;
        position: relative;
      }

      .workspace-tab-header:has(.mod-pinned) .workspace-tab-header-status-container {
        display: none !important;
      }

      .workspace-tab-header:has(.mod-pinned) .workspace-tab-header-inner-title::after {
        visibility: visible !important;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 1.3em;
        line-height: 1;
        display: block;
        color: inherit;
        content: "${DEFAULT_PIN_EMOJI}"; /* Default to pin emoji */
      }
    `;
    for (const pair of this.settings.labelEmojiMap) {
      const safeLabel = pair.label.replace(/"/g, '\\"');
      css += `
        .workspace-tab-header:has(.mod-pinned)[aria-label="${safeLabel}"]
          .workspace-tab-header-inner-title::after {
          content: "${pair.emoji}";
        }
      `;
    }
    this.styleEl.textContent = css;
  }
};
var FilePickerModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(app, onChooseItemCallback) {
    super(app);
    this.onChooseItemCallback = onChooseItemCallback;
  }
  getItems() {
    return this.app.vault.getFiles();
  }
  getItemText(item) {
    return item.path;
  }
  onChooseItem(item) {
    this.onChooseItemCallback(item);
  }
};
var PinnedEmojiSettingTab = class extends import_obsidian.PluginSettingTab {
  // For the chosen emoji
  constructor(app, plugin) {
    super(app, plugin);
    /** 
     * Temporary storage while user picks a file + chooses an emoji
     * before actually adding the mapping.
     */
    this.tempLabel = null;
    // For the file label
    this.tempEmoji = null;
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Pinned Tab Settings" });
    new import_obsidian.Setting(containerEl).setName("Pinned Tab Width").setDesc(`Max width for pinned tabs. Currently: ${this.plugin.settings.pinnedTabSize}px`).addSlider((slider) => {
      slider.setLimits(20, 80, 1).setDynamicTooltip().setValue(this.plugin.settings.pinnedTabSize).onChange(async (val) => {
        this.plugin.settings.pinnedTabSize = val;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h1", { text: "Current Mappings" });
    new import_obsidian.Setting(containerEl).setName("Reset Settings").setDesc("Restore all settings to their default values.").addButton((btn) => {
      btn.setIcon("refresh-cw").setButtonText("Reset").setWarning().onClick(async () => {
        console.log("Settings reset to defaults.");
        this.plugin.settings = DEFAULT_SETTINGS;
        await this.plugin.saveSettings();
        this.display();
        new import_obsidian.Notice("Settings have been reset to their defaults.");
      });
    });
    this.plugin.settings.labelEmojiMap.forEach((mapping, index) => {
      const details = containerEl.createEl("details");
      details.createEl("summary", { text: mapping.label });
      new import_obsidian.Setting(details).setName("File Label").setDesc("The pinned tab label or file name.").addText((text) => {
        text.setValue(mapping.label).onChange(async (val) => {
          mapping.label = val;
          await this.plugin.saveSettings();
        });
      });
      new import_obsidian.Setting(details).setName("Emoji").setDesc("Which emoji to display for this pinned tab.").addDropdown((dropdown) => {
        dropdown.addOption("", "\u2014 Pick an emoji \u2014");
        for (const [label, emoji] of Object.entries(COMMON_EMOJIS)) {
          dropdown.addOption(emoji, `${label} (${emoji})`);
        }
        dropdown.addOption("other", "Type your own...");
        dropdown.setValue(
          Object.values(COMMON_EMOJIS).includes(mapping.emoji) ? mapping.emoji : "other"
        );
        dropdown.onChange(async (val) => {
          if (val === "other") {
          } else {
            mapping.emoji = val;
            await this.plugin.saveSettings();
            this.display();
          }
        });
      }).addText((text) => {
        text.setPlaceholder("Or paste your own emoji").setValue(mapping.emoji).onChange(async (val) => {
          mapping.emoji = val;
          await this.plugin.saveSettings();
        });
      });
      new import_obsidian.Setting(details).addButton((btn) => {
        btn.setButtonText("Remove Mapping").setWarning().onClick(async () => {
          this.plugin.settings.labelEmojiMap.splice(index, 1);
          await this.plugin.saveSettings();
          this.display();
        });
      });
    });
    containerEl.createEl("h1", { text: "Add a New Mapping" });
    new import_obsidian.Setting(containerEl).setName("Pick a File").setDesc(this.tempLabel ? `Chosen: ${this.tempLabel}` : "No file chosen yet.").addButton((btn) => {
      btn.setButtonText("Choose File").onClick(() => {
        new FilePickerModal(this.app, (file) => {
          const label = file.name.replace(/\.md$/, "");
          this.tempLabel = label;
          this.display();
        }).open();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Choose an Emoji").setDesc(this.tempEmoji ? `Emoji: ${this.tempEmoji}` : "No emoji chosen yet.").addDropdown((dropdown) => {
      dropdown.addOption("", "\u2014 Pick an emoji \u2014");
      for (const [label, emoji] of Object.entries(COMMON_EMOJIS)) {
        dropdown.addOption(emoji, `${label} (${emoji})`);
      }
      dropdown.setValue("");
      dropdown.onChange((val) => {
        if (val !== "") {
          this.tempEmoji = val;
          this.display();
        }
      });
    }).addText((text) => {
      text.setPlaceholder("Or put your own emoji").setValue(this.tempEmoji || "").onChange((val) => {
        this.tempEmoji = val;
        this.display();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Add Mapping").setDesc("When both file & emoji are chosen, click to add.").addButton((btn) => {
      btn.setButtonText("Add Mapping").setCta().onClick(async () => {
        if (!this.tempLabel || !this.tempEmoji) {
          new import_obsidian.Notice("Please choose both a file and an emoji first!");
          return;
        }
        this.plugin.settings.labelEmojiMap.push({
          label: this.tempLabel,
          emoji: this.tempEmoji
        });
        await this.plugin.saveSettings();
        this.tempLabel = null;
        this.tempEmoji = null;
        this.display();
        new import_obsidian.Notice("New mapping added!");
      });
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
